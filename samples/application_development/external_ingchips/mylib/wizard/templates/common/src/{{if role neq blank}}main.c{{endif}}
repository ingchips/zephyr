#include <stdio.h>
#include <string.h>
#include "profile.h"
#include "ingsoc.h"
#include "platform_api.h"{{if security}}
#include "kv_storage.h"{{endif}}{{if noos}}
#include "port_gen_os_driver.h"{{else}}
#include "FreeRTOS.h"
#include "task.h"{{endif}}{{if use_eflash}}
#include "eflash.h"{{endif}}{{if trace_enable or use_segger_rtt}}
#include "trace.h"{{endif}}{{if cube}}
#include "../data/setup_soc.cgen"{{endif}}

static uint32_t cb_hard_fault(hard_fault_info_t *info, void *_)
{
    platform_printf("HARDFAULT:\nPC : 0x%08X\nLR : 0x%08X\nPSR: 0x%08X\n"
                    "R0 : 0x%08X\nR1 : 0x%08X\nR2 : 0x%08X\nP3 : 0x%08X\n"
                    "R12: 0x%08X\n",
                    info->pc, info->lr, info->psr,
                    info->r0, info->r1, info->r2, info->r3, info->r12);
    for (;;);
}

static uint32_t cb_assertion(assertion_info_t *info, void *_)
{
    platform_printf("[ASSERTION] @ %s:%d\n",
                    info->file_name,
                    info->line_no);
    for (;;);
}

static uint32_t cb_heap_out_of_mem(uint32_t tag, void *_)
{
    platform_printf("[OOM] @ %d\n", tag);
    for (;;);
}{{if trace_port in uart0 uart1}}

#define TRACE_PORT    {{if trace_port eq uart1}}APB_UART1{{else}}APB_UART0{{endif}}{{endif}}{{if printf_port eq uart0}}

#define PRINT_PORT    APB_UART0{{else}}{{if printf_port eq uart1}}

#define PRINT_PORT    APB_UART1{{endif}}{{endif}}{{if printf_enable}}

uint32_t cb_putc(char *c, void *dummy)
{
    {{if printf_port in uart0 uart1}}while (apUART_Check_TXFIFO_FULL(PRINT_PORT) == 1);
    UART_SendData(PRINT_PORT, (uint8_t)*c);{{else}}SEGGER_RTT_Write(0, c, 1);{{endif}}
    return 0;
}

{{if gcc}}int _write(int fd, char *ptr, int len)
{
    int i;
    for (i = 0; i < len; i++)
        cb_putc(ptr + i, NULL);

    return len;
}{{else}}{{if keil}}int fputc(int ch, FILE *f){{endif}}{{if iar}}int putchar(int ch){{endif}}{{if ide in segger rowley}}int __putchar(int ch, struct __printf_tag * ptr){{endif}}
{
    cb_putc((char *)&ch, NULL);
    return ch;
}{{endif}}{{endif}}{{if cube}}{{else}}{{if printf_enable or trace_enable}}

void config_uart(uint32_t freq, uint32_t baud)
{
    UART_sStateStruct config;

    config.word_length       = UART_WLEN_8_BITS;
    config.parity            = UART_PARITY_NOT_CHECK;
    config.fifo_enable       = 1;
    config.two_stop_bits     = 0;
    config.receive_en        = 1;
    config.transmit_en       = 1;
    config.UART_en           = 1;
    config.cts_en            = 0;
    config.rts_en            = 0;
    config.rxfifo_waterlevel = 1;
    config.txfifo_waterlevel = 1;
    config.ClockFrequency    = freq;
    config.BaudRate          = baud;{{if printf_port in uart0 uart1}}

    apUART_Initialize(PRINT_PORT, &config, 0);{{endif}}{{if trace_port in uart0 uart1}}

    config.BaudRate          = 921600;
    apUART_Initialize(TRACE_PORT, &config, 1 << bsUART_TRANSMIT_INTENAB);{{endif}}
}{{endif}}{{endif}}

void setup_peripherals(void)
{
    {{if cube}}cube_setup_peripherals();{{else}}config_uart(OSC_CLK_FREQ, 115200);{{endif}}
}

uint32_t on_lle_init(void *dummy, void *user_data)
{
    (void)(dummy);
    (void)(user_data);{{if cube}}
    cube_on_lle_init();{{endif}}
    return 0;
}{{if deep_sleep}}

uint32_t on_deep_sleep_wakeup(void *dummy, void *user_data)
{
    (void)(dummy);
    (void)(user_data);
    setup_peripherals();
    return 0;
}

uint32_t query_deep_sleep_allowed(void *dummy, void *user_data)
{
    (void)(dummy);
    (void)(user_data);
    // TODO: return 0 if deep sleep is not allowed now; else deep sleep is allowed
    return 0;
}{{endif}}{{if watchdog}}

static void watchdog_task(void *pdata)
{
    for (;;)
    {
        vTaskDelay(pdMS_TO_TICKS(5000));
        TMR_WatchDogRestart();
    }
}{{endif}}{{if security}}

{{if use_eflash}}#define DB_FLASH_ADDRESS  {{eflash_addr}}{{endif}}
int db_write_to_flash(const void *db, const int size)
{
    {{if use_eflash}}program_flash(DB_FLASH_ADDRESS, (const uint8_t *)db, size);{{else}}// TODO: save data{{endif}}
    return KV_OK;
}

int db_read_from_flash(void *db, const int max_size)
{
    {{if use_eflash}}memcpy(db, (void *)DB_FLASH_ADDRESS, max_size);{{else}}// TODO: load data{{endif}}
    return KV_OK;
}{{endif}}{{if trace_enable}}
{{if trace_port eq seggerrtt}}
trace_rtt_t trace_ctx = {0};
{{else}}
trace_uart_t trace_ctx = {.port = TRACE_PORT};{{endif}}{{endif}}

static const platform_evt_cb_table_t evt_cb_table =
{
    .callbacks = {
        [PLATFORM_CB_EVT_HARD_FAULT] = {
            .f = (f_platform_evt_cb)cb_hard_fault,
        },
        [PLATFORM_CB_EVT_ASSERTION] = {
            .f = (f_platform_evt_cb)cb_assertion,
        },
        [PLATFORM_CB_EVT_HEAP_OOM] = {
            .f = (f_platform_evt_cb)cb_heap_out_of_mem,
        },
        [PLATFORM_CB_EVT_PROFILE_INIT] = {
            .f = setup_profile,
        },
        [PLATFORM_CB_EVT_LLE_INIT] = {
            .f = on_lle_init,
        },{{if deep_sleep}}
        [PLATFORM_CB_EVT_ON_DEEP_SLEEP_WAKEUP] = {
            .f = (f_platform_evt_cb)on_deep_sleep_wakeup,
        },
        [PLATFORM_CB_EVT_QUERY_DEEP_SLEEP_ALLOWED] = {
            .f = query_deep_sleep_allowed,
        },{{endif}}{{if printf_enable}}
        [PLATFORM_CB_EVT_PUTC] = {
            .f = (f_platform_evt_cb)cb_putc,
        },{{endif}}{{if trace_enable}}
        [PLATFORM_CB_EVT_TRACE] = {
            .f = (f_platform_evt_cb){{if trace_port eq seggerrtt}}cb_trace_rtt{{else}}cb_trace_uart{{endif}},
            .user_data = &trace_ctx,
        },{{endif}}
    }
};

{{if noos}}// TODO: add RTOS source code to the project.
uintptr_t{{else}}int{{endif}} app_main()
{
{{if cube}}    cube_soc_init();

{{else}}{{endif}}    // setup event handlers
    platform_set_evt_callback_table(&evt_cb_table);

{{if power_saving}}    platform_config(PLATFORM_CFG_POWER_SAVING, PLATFORM_CFG_ENABLE);{{endif}}{{if enable_hci_log}}
    platform_config(PLATFORM_CFG_LOG_HCI, PLATFORM_CFG_ENABLE);

{{endif}}    setup_peripherals();
    SYSCTRL_Init();{{if watchdog}}
    xTaskCreate(watchdog_task,
           "w",
           configMINIMAL_STACK_SIZE,
           NULL,
           (configMAX_PRIORITIES - 1),
           NULL);{{endif}}{{if security}}
    kv_init(db_write_to_flash, db_read_from_flash);{{endif}}{{if trace_enable}}{{if trace_port eq seggerrtt}}

    trace_rtt_init(&trace_ctx);{{else}}

    trace_uart_init(&trace_ctx);
    platform_set_irq_callback({{if trace_port eq uart1}}PLATFORM_CB_IRQ_UART1{{else}}PLATFORM_CB_IRQ_UART0{{endif}}, (f_platform_irq_cb)trace_uart_isr, &trace_ctx);{{endif}}
    // TODO: config trace mask
    platform_config(PLATFORM_CFG_TRACE_MASK, 0);

{{endif}}    {{if noos}}return (uintptr_t)os_impl_get_driver();{{else}}return 0;{{endif}}
}

