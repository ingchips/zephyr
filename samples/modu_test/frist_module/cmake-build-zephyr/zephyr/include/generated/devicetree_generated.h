/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/ming/zephyrproject/zephyr/samples/modu_test/frist_module/cmake-build-zephyr/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   /home/ming/zephyrproject/zephyr/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /memory@20004358
 *   4   /cpus
 *   5   /cpus/power-states
 *   6   /cpus/power-states/idle
 *   7   /cpus/power-states/suspend
 *   8   /cpus/cpu@0
 *   9   /soc
 *   10  /soc/interrupt-controller@e000e100
 *   11  /soc/gpio@40011000
 *   12  /gpio_keys
 *   13  /gpio_keys/button
 *   14  /soc/gpio@40012000
 *   15  /leds
 *   16  /leds/led_2
 *   17  /system-clock
 *   18  /soc/i2c@40013000
 *   19  /soc/i2c@40014000
 *   20  /soc/rtc@4000a000
 *   21  /soc/spi@40008000
 *   22  /soc/spi@40009000
 *   23  /soc/timer@e000e010
 *   24  /soc/uart@4000c000
 *   25  /soc/uart@4000d000
 *   26  /soc/flash-controller@02027000
 *   27  /soc/flash-controller@02027000/flash@0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_memory_20004358) fn(DT_N_S_system_clock) fn(DT_N_S_leds) fn(DT_N_S_gpio_keys)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20004358) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_system_clock) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_20004358, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20004358, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_system_clock, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_memory_20004358) fn(DT_N_S_system_clock) fn(DT_N_S_leds) fn(DT_N_S_gpio_keys)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20004358) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_system_clock) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_20004358, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_20004358, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_system_clock, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /memory@20004358 */ \
	4, /* /cpus */ \
	9, /* /soc */ \
	12, /* /gpio_keys */ \
	15, /* /leds */ \
	17, /* /system-clock */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_ingchips_ing9168mini DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_ingchips_ing9168mini 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "ing9168mini"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"ingchips,ing9168mini"}
#define DT_N_P_compatible_IDX_0 "ingchips,ing9168mini"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing9168mini
#define DT_N_P_compatible_IDX_0_STRING_TOKEN ingchips_ing9168mini
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING9168MINI
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1
#define DT_N_S_aliases_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2
#define DT_N_S_chosen_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@20004358
 *
 * Node identifier: DT_N_S_memory_20004358
 *
 * Binding (compatible = mmio-sram):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_20004358_PATH "/memory@20004358"

/* Node's name with unit-address: */
#define DT_N_S_memory_20004358_FULL_NAME "memory@20004358"

/* Node parent (/) identifier: */
#define DT_N_S_memory_20004358_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_20004358_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_memory_20004358_FOREACH_CHILD(fn) 
#define DT_N_S_memory_20004358_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_memory_20004358_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_20004358_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_memory_20004358_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_20004358_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_memory_20004358_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_memory_20004358_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_20004358_ORD 3
#define DT_N_S_memory_20004358_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_20004358_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_20004358_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_20004358_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_memory_20004358
#define DT_N_NODELABEL_sram0  DT_N_S_memory_20004358

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_20004358_REG_NUM 1
#define DT_N_S_memory_20004358_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_20004358_REG_IDX_0_VAL_ADDRESS 536888152 /* 0x20004358 */
#define DT_N_S_memory_20004358_REG_IDX_0_VAL_SIZE 40104 /* 0x9ca8 */
#define DT_N_S_memory_20004358_RANGES_NUM 0
#define DT_N_S_memory_20004358_FOREACH_RANGE(fn) 
#define DT_N_S_memory_20004358_IRQ_NUM 0
#define DT_N_S_memory_20004358_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_20004358_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_20004358_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_20004358_P_reg {536888152 /* 0x20004358 */, 40104 /* 0x9ca8 */}
#define DT_N_S_memory_20004358_P_reg_IDX_0 536888152
#define DT_N_S_memory_20004358_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_20004358_P_reg_IDX_1 40104
#define DT_N_S_memory_20004358_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_20004358_P_reg_EXISTS 1
#define DT_N_S_memory_20004358_P_compatible {"mmio-sram"}
#define DT_N_S_memory_20004358_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_20004358_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_memory_20004358_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_memory_20004358_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_memory_20004358_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_20004358_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_20004358, compatible, 0)
#define DT_N_S_memory_20004358_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_memory_20004358, compatible, 0)
#define DT_N_S_memory_20004358_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_20004358, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_20004358_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_memory_20004358, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_20004358_P_compatible_LEN 1
#define DT_N_S_memory_20004358_P_compatible_EXISTS 1
#define DT_N_S_memory_20004358_P_wakeup_source 0
#define DT_N_S_memory_20004358_P_wakeup_source_EXISTS 1
#define DT_N_S_memory_20004358_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_memory_20004358_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 4
#define DT_N_S_cpus_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	5, /* /cpus/power-states */ \
	8, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states
 *
 * Node identifier: DT_N_S_cpus_S_power_states
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_PATH "/cpus/power-states"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_FULL_NAME "power-states"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_power_states_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_power_states_S_idle) fn(DT_N_S_cpus_S_power_states_S_suspend)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_idle) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_suspend)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_idle, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_suspend, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_idle, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_suspend, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_power_states_S_idle) fn(DT_N_S_cpus_S_power_states_S_suspend)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_idle) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_suspend)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_idle, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_suspend, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_idle, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_suspend, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_ORD 5
#define DT_N_S_cpus_S_power_states_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_SUPPORTS_ORDS \
	6, /* /cpus/power-states/idle */ \
	7, /* /cpus/power-states/suspend */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_REG_NUM 0
#define DT_N_S_cpus_S_power_states_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states/idle
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_idle
 *
 * Binding (compatible = zephyr,power-state):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_idle_PATH "/cpus/power-states/idle"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_idle_FULL_NAME "idle"

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_idle_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_idle_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_idle_ORD 6
#define DT_N_S_cpus_S_power_states_S_idle_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_idle_REQUIRES_ORDS \
	5, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_idle_SUPPORTS_ORDS \
	8, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_idle_EXISTS 1
#define DT_N_INST_0_zephyr_power_state DT_N_S_cpus_S_power_states_S_idle
#define DT_N_NODELABEL_idle            DT_N_S_cpus_S_power_states_S_idle

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_idle_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_idle_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_idle_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_idle_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_idle_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_idle_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_idle_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_idle_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_idle_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_idle_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_idle_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name "runtime-idle"
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_STRING_UNQUOTED runtime-idle
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_STRING_TOKEN runtime_idle
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_STRING_UPPER_TOKEN RUNTIME_IDLE
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_IDX_0 "runtime-idle"
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_ENUM_IDX 1
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_ENUM_VAL_runtime_idle_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_ENUM_TOKEN runtime_idle
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_ENUM_UPPER_TOKEN RUNTIME_IDLE
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_idle, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_idle, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_idle, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_idle, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_idle_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_idle_P_min_residency_us 0
#define DT_N_S_cpus_S_power_states_S_idle_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_idle_P_exit_latency_us 0
#define DT_N_S_cpus_S_power_states_S_idle_P_exit_latency_us_EXISTS 1

/*
 * Devicetree node: /cpus/power-states/suspend
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_suspend
 *
 * Binding (compatible = zephyr,power-state):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_suspend_PATH "/cpus/power-states/suspend"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_suspend_FULL_NAME "suspend"

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_suspend_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_suspend_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_suspend_ORD 7
#define DT_N_S_cpus_S_power_states_S_suspend_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_suspend_REQUIRES_ORDS \
	5, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_suspend_SUPPORTS_ORDS \
	8, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_suspend_EXISTS 1
#define DT_N_INST_1_zephyr_power_state DT_N_S_cpus_S_power_states_S_suspend
#define DT_N_NODELABEL_suspend         DT_N_S_cpus_S_power_states_S_suspend

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_suspend_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_suspend_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_suspend_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_suspend_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_suspend_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_suspend_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_suspend_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_suspend_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_suspend_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_suspend_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_suspend_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name "suspend-to-idle"
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_STRING_UNQUOTED suspend-to-idle
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_STRING_TOKEN suspend_to_idle
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_STRING_UPPER_TOKEN SUSPEND_TO_IDLE
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_IDX_0 "suspend-to-idle"
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_ENUM_IDX 2
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_ENUM_VAL_suspend_to_idle_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_ENUM_TOKEN suspend_to_idle
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_ENUM_UPPER_TOKEN SUSPEND_TO_IDLE
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_suspend, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_suspend, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_suspend, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_suspend, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_suspend_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_suspend_P_min_residency_us 5000
#define DT_N_S_cpus_S_power_states_S_suspend_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_suspend_P_exit_latency_us 800
#define DT_N_S_cpus_S_power_states_S_suspend_P_exit_latency_us_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-m4):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/cpu/arm,cortex-m4.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 8
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	4, /* /cpus */ \
	6, /* /cpus/power-states/idle */ \
	7, /* /cpus/power-states/suspend */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_m4 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m4 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "cortex-m4"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0 DT_N_S_cpus_S_power_states_S_idle
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_PH DT_N_S_cpus_S_power_states_S_idle
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1 DT_N_S_cpus_S_power_states_S_suspend
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_PH DT_N_S_cpus_S_power_states_S_suspend
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_LEN 2
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-m4"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-m4"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED arm,cortex-m4
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN arm_cortex_m4
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_M4
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_02027000) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000) fn(DT_N_S_soc_S_gpio_40011000) fn(DT_N_S_soc_S_i2c_40013000) fn(DT_N_S_soc_S_i2c_40014000) fn(DT_N_S_soc_S_spi_40008000) fn(DT_N_S_soc_S_spi_40009000) fn(DT_N_S_soc_S_rtc_4000a000) fn(DT_N_S_soc_S_gpio_40012000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_02027000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000d000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40011000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40013000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40014000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_40008000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_40009000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_4000a000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40012000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_02027000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40011000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40013000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40014000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_40008000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_40009000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_4000a000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40012000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_02027000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40011000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40013000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_40014000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_40008000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_40009000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_4000a000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40012000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_02027000) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000) fn(DT_N_S_soc_S_gpio_40011000) fn(DT_N_S_soc_S_gpio_40012000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_02027000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000d000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40011000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40012000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_02027000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40011000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40012000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_02027000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40011000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_40012000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 9
#define DT_N_S_soc_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	10, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/gpio@40011000 */ \
	14, /* /soc/gpio@40012000 */ \
	18, /* /soc/i2c@40013000 */ \
	19, /* /soc/i2c@40014000 */ \
	20, /* /soc/rtc@4000a000 */ \
	21, /* /soc/spi@40008000 */ \
	22, /* /soc/spi@40009000 */ \
	23, /* /soc/timer@e000e010 */ \
	24, /* /soc/uart@4000c000 */ \
	25, /* /soc/uart@4000d000 */ \
	26, /* /soc/flash-controller@02027000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1
#define DT_N_S_soc_P_ranges_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@e000e100
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_e000e100
 *
 * Binding (compatible = arm,v7m-nvic):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/interrupt-controller/arm,v7m-nvic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PATH "/soc/interrupt-controller@e000e100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME "interrupt-controller@e000e100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD 10
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_SUPPORTS_ORDS \
	11, /* /soc/gpio@40011000 */ \
	14, /* /soc/gpio@40012000 */ \
	18, /* /soc/i2c@40013000 */ \
	19, /* /soc/i2c@40014000 */ \
	20, /* /soc/rtc@4000a000 */ \
	21, /* /soc/spi@40008000 */ \
	22, /* /soc/spi@40009000 */ \
	24, /* /soc/uart@4000c000 */ \
	25, /* /soc/uart@4000d000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS 1
#define DT_N_INST_0_arm_v7m_nvic DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_NODELABEL_nvic      DT_N_S_soc_S_interrupt_controller_e000e100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS 3758153984 /* 0xe000e100 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE 3072 /* 0xc00 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v7m_nvic 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0 "v7m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg {3758153984 /* 0xe000e100 */, 3072 /* 0xc00 */}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0 3758153984
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1 3072
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits 5
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible {"arm,v7m-nvic"}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0 "arm,v7m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_UNQUOTED arm,v7m-nvic
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_TOKEN arm_v7m_nvic
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_V7M_NVIC
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40011000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40011000
 *
 * Binding (compatible = ingchips,ing-gpio):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/gpio/ingchips,ing-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40011000_PATH "/soc/gpio@40011000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40011000_FULL_NAME "gpio@40011000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40011000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40011000_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40011000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40011000_ORD 11
#define DT_N_S_soc_S_gpio_40011000_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40011000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40011000_SUPPORTS_ORDS \
	12, /* /gpio_keys */ \
	13, /* /gpio_keys/button */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40011000_EXISTS 1
#define DT_N_INST_0_ingchips_ing_gpio DT_N_S_soc_S_gpio_40011000
#define DT_N_NODELABEL_gpio0          DT_N_S_soc_S_gpio_40011000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40011000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40011000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_REG_IDX_0_VAL_ADDRESS 1073811456 /* 0x40011000 */
#define DT_N_S_soc_S_gpio_40011000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40011000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40011000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40011000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40011000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_IRQ_IDX_0_VAL_irq 0
#define DT_N_S_soc_S_gpio_40011000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40011000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_COMPAT_MATCHES_ingchips_ing_gpio 1
#define DT_N_S_soc_S_gpio_40011000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_gpio_40011000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_COMPAT_MODEL_IDX_0 "ing-gpio"
#define DT_N_S_soc_S_gpio_40011000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40011000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40011000_P_reg {1073811456 /* 0x40011000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40011000_P_reg_IDX_0 1073811456
#define DT_N_S_soc_S_gpio_40011000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40011000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_interrupts {0 /* 0x0 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40011000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_gpio_40011000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40011000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40011000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_ngpios 21
#define DT_N_S_soc_S_gpio_40011000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_status "okay"
#define DT_N_S_soc_S_gpio_40011000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_40011000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40011000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40011000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_40011000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40011000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40011000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40011000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40011000, status, 0)
#define DT_N_S_soc_S_gpio_40011000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40011000, status, 0)
#define DT_N_S_soc_S_gpio_40011000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40011000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40011000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40011000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40011000_P_status_LEN 1
#define DT_N_S_soc_S_gpio_40011000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_compatible {"ingchips,ing-gpio"}
#define DT_N_S_soc_S_gpio_40011000_P_compatible_IDX_0 "ingchips,ing-gpio"
#define DT_N_S_soc_S_gpio_40011000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-gpio
#define DT_N_S_soc_S_gpio_40011000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_gpio
#define DT_N_S_soc_S_gpio_40011000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_GPIO
#define DT_N_S_soc_S_gpio_40011000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40011000, compatible, 0)
#define DT_N_S_soc_S_gpio_40011000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40011000, compatible, 0)
#define DT_N_S_soc_S_gpio_40011000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40011000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40011000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40011000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40011000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40011000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40011000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_40011000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_40011000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /gpio_keys
 *
 * Node identifier: DT_N_S_gpio_keys
 *
 * Binding (compatible = gpio-keys):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/input/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_PATH "/gpio_keys"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_FULL_NAME "gpio_keys"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_keys_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_FOREACH_CHILD(fn) fn(DT_N_S_gpio_keys_S_button)
#define DT_N_S_gpio_keys_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button)
#define DT_N_S_gpio_keys_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_gpio_keys_S_button)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_ORD 12
#define DT_N_S_gpio_keys_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_REQUIRES_ORDS \
	0, /* / */ \
	11, /* /soc/gpio@40011000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_SUPPORTS_ORDS \
	13, /* /gpio_keys/button */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_EXISTS 1
#define DT_N_INST_0_gpio_keys DT_N_S_gpio_keys

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_REG_NUM 0
#define DT_N_S_gpio_keys_RANGES_NUM 0
#define DT_N_S_gpio_keys_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_IRQ_NUM 0
#define DT_N_S_gpio_keys_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_gpio_keys_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_P_debounce_interval_ms 30
#define DT_N_S_gpio_keys_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_gpio_keys_P_compatible {"gpio-keys"}
#define DT_N_S_gpio_keys_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_UNQUOTED gpio-keys
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_TOKEN gpio_keys
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_KEYS
#define DT_N_S_gpio_keys_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys, compatible, 0)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys, compatible, 0)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_P_compatible_LEN 1
#define DT_N_S_gpio_keys_P_compatible_EXISTS 1
#define DT_N_S_gpio_keys_P_wakeup_source 0
#define DT_N_S_gpio_keys_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_keys_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_keys_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /gpio_keys/button
 *
 * Node identifier: DT_N_S_gpio_keys_S_button
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_S_button_PATH "/gpio_keys/button"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_S_button_FULL_NAME "button"

/* Node parent (/gpio_keys) identifier: */
#define DT_N_S_gpio_keys_S_button_PARENT DT_N_S_gpio_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_S_button_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_S_button_ORD 13
#define DT_N_S_gpio_keys_S_button_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_S_button_REQUIRES_ORDS \
	11, /* /soc/gpio@40011000 */ \
	12, /* /gpio_keys */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_S_button_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_S_button_EXISTS 1
#define DT_N_NODELABEL_user_button DT_N_S_gpio_keys_S_button

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_S_button_REG_NUM 0
#define DT_N_S_gpio_keys_S_button_RANGES_NUM 0
#define DT_N_S_gpio_keys_S_button_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_S_button_IRQ_NUM 0
#define DT_N_S_gpio_keys_S_button_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_S_button_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_S_button_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_40011000
#define DT_N_S_gpio_keys_S_button_P_gpios_IDX_0_VAL_pin 1
#define DT_N_S_gpio_keys_S_button_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_gpio_keys_S_button_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_gpio_keys_S_button_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_gpio_keys_S_button_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button, gpios, 0)
#define DT_N_S_gpio_keys_S_button_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button, gpios, 0)
#define DT_N_S_gpio_keys_S_button_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_P_gpios_LEN 1
#define DT_N_S_gpio_keys_S_button_P_gpios_EXISTS 1
#define DT_N_S_gpio_keys_S_button_P_label "User"
#define DT_N_S_gpio_keys_S_button_P_label_STRING_UNQUOTED User
#define DT_N_S_gpio_keys_S_button_P_label_STRING_TOKEN User
#define DT_N_S_gpio_keys_S_button_P_label_STRING_UPPER_TOKEN USER
#define DT_N_S_gpio_keys_S_button_P_label_IDX_0 "User"
#define DT_N_S_gpio_keys_S_button_P_label_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button, label, 0)
#define DT_N_S_gpio_keys_S_button_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button, label, 0)
#define DT_N_S_gpio_keys_S_button_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_P_label_LEN 1
#define DT_N_S_gpio_keys_S_button_P_label_EXISTS 1
#define DT_N_S_gpio_keys_S_button_P_zephyr_code 0
#define DT_N_S_gpio_keys_S_button_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40012000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40012000
 *
 * Binding (compatible = ingchips,ing-gpio):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/gpio/ingchips,ing-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40012000_PATH "/soc/gpio@40012000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40012000_FULL_NAME "gpio@40012000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40012000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40012000_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40012000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40012000_ORD 14
#define DT_N_S_soc_S_gpio_40012000_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40012000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40012000_SUPPORTS_ORDS \
	15, /* /leds */ \
	16, /* /leds/led_2 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40012000_EXISTS 1
#define DT_N_INST_1_ingchips_ing_gpio DT_N_S_soc_S_gpio_40012000
#define DT_N_NODELABEL_gpio1          DT_N_S_soc_S_gpio_40012000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40012000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40012000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_REG_IDX_0_VAL_ADDRESS 1073815552 /* 0x40012000 */
#define DT_N_S_soc_S_gpio_40012000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40012000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40012000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40012000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40012000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_IRQ_IDX_0_VAL_irq 1
#define DT_N_S_soc_S_gpio_40012000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40012000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_COMPAT_MATCHES_ingchips_ing_gpio 1
#define DT_N_S_soc_S_gpio_40012000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_gpio_40012000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_COMPAT_MODEL_IDX_0 "ing-gpio"
#define DT_N_S_soc_S_gpio_40012000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40012000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40012000_P_reg {1073815552 /* 0x40012000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40012000_P_reg_IDX_0 1073815552
#define DT_N_S_soc_S_gpio_40012000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40012000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_interrupts {1 /* 0x1 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40012000_P_interrupts_IDX_0 1
#define DT_N_S_soc_S_gpio_40012000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40012000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40012000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_ngpios 15
#define DT_N_S_soc_S_gpio_40012000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_status "okay"
#define DT_N_S_soc_S_gpio_40012000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_40012000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40012000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40012000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_40012000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40012000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40012000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40012000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40012000, status, 0)
#define DT_N_S_soc_S_gpio_40012000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40012000, status, 0)
#define DT_N_S_soc_S_gpio_40012000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40012000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40012000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40012000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40012000_P_status_LEN 1
#define DT_N_S_soc_S_gpio_40012000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_compatible {"ingchips,ing-gpio"}
#define DT_N_S_soc_S_gpio_40012000_P_compatible_IDX_0 "ingchips,ing-gpio"
#define DT_N_S_soc_S_gpio_40012000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-gpio
#define DT_N_S_soc_S_gpio_40012000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_gpio
#define DT_N_S_soc_S_gpio_40012000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_GPIO
#define DT_N_S_soc_S_gpio_40012000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40012000, compatible, 0)
#define DT_N_S_soc_S_gpio_40012000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_40012000, compatible, 0)
#define DT_N_S_soc_S_gpio_40012000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40012000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40012000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_40012000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40012000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40012000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40012000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_40012000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_40012000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_2, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 15
#define DT_N_S_leds_ORD_STR_SORTABLE 00015

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */ \
	14, /* /soc/gpio@40012000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	16, /* /leds/led_2 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds
#define DT_N_NODELABEL_leds   DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led_2
 *
 * Node identifier: DT_N_S_leds_S_led_2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_2_PATH "/leds/led_2"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_2_FULL_NAME "led_2"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_2_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_2_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_2_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_2_ORD 16
#define DT_N_S_leds_S_led_2_ORD_STR_SORTABLE 00016

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_2_REQUIRES_ORDS \
	14, /* /soc/gpio@40012000 */ \
	15, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_2_EXISTS 1
#define DT_N_ALIAS_led0            DT_N_S_leds_S_led_2
#define DT_N_NODELABEL_green_led_2 DT_N_S_leds_S_led_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_2_REG_NUM 0
#define DT_N_S_leds_S_led_2_RANGES_NUM 0
#define DT_N_S_leds_S_led_2_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_2_IRQ_NUM 0
#define DT_N_S_leds_S_led_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_40012000
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_2, gpios, 0)
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_2, gpios, 0)
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_gpios_LEN 1
#define DT_N_S_leds_S_led_2_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_2_P_label "User LD2"
#define DT_N_S_leds_S_led_2_P_label_STRING_UNQUOTED User LD2
#define DT_N_S_leds_S_led_2_P_label_STRING_TOKEN User_LD2
#define DT_N_S_leds_S_led_2_P_label_STRING_UPPER_TOKEN USER_LD2
#define DT_N_S_leds_S_led_2_P_label_IDX_0 "User LD2"
#define DT_N_S_leds_S_led_2_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_2, label, 0)
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_2, label, 0)
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_2, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_label_LEN 1
#define DT_N_S_leds_S_led_2_P_label_EXISTS 1

/*
 * Devicetree node: /system-clock
 *
 * Node identifier: DT_N_S_system_clock
 *
 * Binding (compatible = fixed-clock):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/clock/fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_system_clock_PATH "/system-clock"

/* Node's name with unit-address: */
#define DT_N_S_system_clock_FULL_NAME "system-clock"

/* Node parent (/) identifier: */
#define DT_N_S_system_clock_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_system_clock_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_system_clock_FOREACH_CHILD(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_system_clock_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_system_clock_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_system_clock_ORD 17
#define DT_N_S_system_clock_ORD_STR_SORTABLE 00017

/* Ordinals for what this node depends on directly: */
#define DT_N_S_system_clock_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_system_clock_SUPPORTS_ORDS \
	18, /* /soc/i2c@40013000 */ \
	19, /* /soc/i2c@40014000 */ \
	24, /* /soc/uart@4000c000 */ \
	25, /* /soc/uart@4000d000 */

/* Existence and alternate IDs: */
#define DT_N_S_system_clock_EXISTS 1
#define DT_N_INST_0_fixed_clock DT_N_S_system_clock
#define DT_N_NODELABEL_sysclk   DT_N_S_system_clock

/* Macros for properties that are special in the specification: */
#define DT_N_S_system_clock_REG_NUM 0
#define DT_N_S_system_clock_RANGES_NUM 0
#define DT_N_S_system_clock_FOREACH_RANGE(fn) 
#define DT_N_S_system_clock_IRQ_NUM 0
#define DT_N_S_system_clock_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_system_clock_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_system_clock_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_system_clock_P_clock_frequency 112000000
#define DT_N_S_system_clock_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/i2c@40013000
 *
 * Node identifier: DT_N_S_soc_S_i2c_40013000
 *
 * Binding (compatible = ingchips,ing-i2c):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/i2c/ingchips,ing-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_40013000_PATH "/soc/i2c@40013000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_40013000_FULL_NAME "i2c@40013000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_40013000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_40013000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40013000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_40013000_ORD 18
#define DT_N_S_soc_S_i2c_40013000_ORD_STR_SORTABLE 00018

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_40013000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */ \
	17, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_40013000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_40013000_EXISTS 1
#define DT_N_INST_0_ingchips_ing_i2c DT_N_S_soc_S_i2c_40013000
#define DT_N_NODELABEL_i2c0          DT_N_S_soc_S_i2c_40013000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_40013000_REG_NUM 1
#define DT_N_S_soc_S_i2c_40013000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_REG_IDX_0_VAL_ADDRESS 1073819648 /* 0x40013000 */
#define DT_N_S_soc_S_i2c_40013000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_40013000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_40013000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_40013000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_40013000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_IRQ_IDX_0_VAL_irq 2
#define DT_N_S_soc_S_i2c_40013000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_IRQ_IDX_0_VAL_priority 4
#define DT_N_S_soc_S_i2c_40013000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_COMPAT_MATCHES_ingchips_ing_i2c 1
#define DT_N_S_soc_S_i2c_40013000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_i2c_40013000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_COMPAT_MODEL_IDX_0 "ing-i2c"
#define DT_N_S_soc_S_i2c_40013000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_40013000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_40013000_P_reg {1073819648 /* 0x40013000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_40013000_P_reg_IDX_0 1073819648
#define DT_N_S_soc_S_i2c_40013000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_40013000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_status "disabled"
#define DT_N_S_soc_S_i2c_40013000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_i2c_40013000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_40013000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_40013000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_i2c_40013000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_40013000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_40013000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_40013000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40013000, status, 0)
#define DT_N_S_soc_S_i2c_40013000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40013000, status, 0)
#define DT_N_S_soc_S_i2c_40013000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40013000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40013000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40013000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40013000_P_status_LEN 1
#define DT_N_S_soc_S_i2c_40013000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_compatible {"ingchips,ing-i2c"}
#define DT_N_S_soc_S_i2c_40013000_P_compatible_IDX_0 "ingchips,ing-i2c"
#define DT_N_S_soc_S_i2c_40013000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-i2c
#define DT_N_S_soc_S_i2c_40013000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_i2c
#define DT_N_S_soc_S_i2c_40013000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_I2C
#define DT_N_S_soc_S_i2c_40013000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40013000, compatible, 0)
#define DT_N_S_soc_S_i2c_40013000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40013000, compatible, 0)
#define DT_N_S_soc_S_i2c_40013000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40013000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40013000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40013000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40013000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_40013000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_interrupts {2 /* 0x2 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_i2c_40013000_P_interrupts_IDX_0 2
#define DT_N_S_soc_S_i2c_40013000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_interrupts_IDX_1 4
#define DT_N_S_soc_S_i2c_40013000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_i2c_40013000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40013000, clocks, 0)
#define DT_N_S_soc_S_i2c_40013000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40013000, clocks, 0)
#define DT_N_S_soc_S_i2c_40013000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40013000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40013000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40013000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40013000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_40013000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_40013000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_40013000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2c_40013000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2c@40014000
 *
 * Node identifier: DT_N_S_soc_S_i2c_40014000
 *
 * Binding (compatible = ingchips,ing-i2c):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/i2c/ingchips,ing-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_40014000_PATH "/soc/i2c@40014000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_40014000_FULL_NAME "i2c@40014000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_40014000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_40014000_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_40014000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_40014000_ORD 19
#define DT_N_S_soc_S_i2c_40014000_ORD_STR_SORTABLE 00019

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_40014000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */ \
	17, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_40014000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_40014000_EXISTS 1
#define DT_N_INST_1_ingchips_ing_i2c DT_N_S_soc_S_i2c_40014000
#define DT_N_NODELABEL_i2c1          DT_N_S_soc_S_i2c_40014000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_40014000_REG_NUM 1
#define DT_N_S_soc_S_i2c_40014000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_REG_IDX_0_VAL_ADDRESS 1073823744 /* 0x40014000 */
#define DT_N_S_soc_S_i2c_40014000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_40014000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_40014000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_40014000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_40014000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_soc_S_i2c_40014000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_IRQ_IDX_0_VAL_priority 5
#define DT_N_S_soc_S_i2c_40014000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_COMPAT_MATCHES_ingchips_ing_i2c 1
#define DT_N_S_soc_S_i2c_40014000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_i2c_40014000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_COMPAT_MODEL_IDX_0 "ing-i2c"
#define DT_N_S_soc_S_i2c_40014000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_40014000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_40014000_P_reg {1073823744 /* 0x40014000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_40014000_P_reg_IDX_0 1073823744
#define DT_N_S_soc_S_i2c_40014000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_40014000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_status "disabled"
#define DT_N_S_soc_S_i2c_40014000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_i2c_40014000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_40014000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_40014000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_i2c_40014000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_40014000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_40014000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_40014000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40014000, status, 0)
#define DT_N_S_soc_S_i2c_40014000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40014000, status, 0)
#define DT_N_S_soc_S_i2c_40014000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40014000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40014000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40014000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40014000_P_status_LEN 1
#define DT_N_S_soc_S_i2c_40014000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_compatible {"ingchips,ing-i2c"}
#define DT_N_S_soc_S_i2c_40014000_P_compatible_IDX_0 "ingchips,ing-i2c"
#define DT_N_S_soc_S_i2c_40014000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-i2c
#define DT_N_S_soc_S_i2c_40014000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_i2c
#define DT_N_S_soc_S_i2c_40014000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_I2C
#define DT_N_S_soc_S_i2c_40014000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40014000, compatible, 0)
#define DT_N_S_soc_S_i2c_40014000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40014000, compatible, 0)
#define DT_N_S_soc_S_i2c_40014000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40014000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40014000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40014000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40014000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_40014000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_interrupts {3 /* 0x3 */, 5 /* 0x5 */}
#define DT_N_S_soc_S_i2c_40014000_P_interrupts_IDX_0 3
#define DT_N_S_soc_S_i2c_40014000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_interrupts_IDX_1 5
#define DT_N_S_soc_S_i2c_40014000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_i2c_40014000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_40014000, clocks, 0)
#define DT_N_S_soc_S_i2c_40014000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_40014000, clocks, 0)
#define DT_N_S_soc_S_i2c_40014000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_40014000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40014000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_40014000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_40014000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_40014000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_40014000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_40014000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2c_40014000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/rtc@4000a000
 *
 * Node identifier: DT_N_S_soc_S_rtc_4000a000
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_4000a000_PATH "/soc/rtc@4000a000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_4000a000_FULL_NAME "rtc@4000a000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_4000a000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_4000a000_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_4000a000_ORD 20
#define DT_N_S_soc_S_rtc_4000a000_ORD_STR_SORTABLE 00020

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_4000a000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_4000a000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_4000a000_EXISTS 1
#define DT_N_INST_0_ingchips_ing_rtc DT_N_S_soc_S_rtc_4000a000
#define DT_N_NODELABEL_rtc           DT_N_S_soc_S_rtc_4000a000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_4000a000_REG_NUM 1
#define DT_N_S_soc_S_rtc_4000a000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_REG_IDX_0_VAL_ADDRESS 1073782784 /* 0x4000a000 */
#define DT_N_S_soc_S_rtc_4000a000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_rtc_4000a000_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_4000a000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_4000a000_IRQ_NUM 1
#define DT_N_S_soc_S_rtc_4000a000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_soc_S_rtc_4000a000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_rtc_4000a000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_COMPAT_MATCHES_ingchips_ing_rtc 1
#define DT_N_S_soc_S_rtc_4000a000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_rtc_4000a000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_COMPAT_MODEL_IDX_0 "ing-rtc"
#define DT_N_S_soc_S_rtc_4000a000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_4000a000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_4000a000_P_compatible {"ingchips,ing-rtc"}
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_IDX_0 "ingchips,ing-rtc"
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-rtc
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_rtc
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_RTC
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_4000a000, compatible, 0)
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_4000a000, compatible, 0)
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_4000a000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_4000a000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_4000a000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_reg {1073782784 /* 0x4000a000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_rtc_4000a000_P_reg_IDX_0 1073782784
#define DT_N_S_soc_S_rtc_4000a000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_rtc_4000a000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_interrupts {11 /* 0xb */, 0 /* 0x0 */}
#define DT_N_S_soc_S_rtc_4000a000_P_interrupts_IDX_0 11
#define DT_N_S_soc_S_rtc_4000a000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_rtc_4000a000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_status "disabled"
#define DT_N_S_soc_S_rtc_4000a000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_rtc_4000a000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_rtc_4000a000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_rtc_4000a000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_rtc_4000a000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_rtc_4000a000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_rtc_4000a000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_rtc_4000a000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_rtc_4000a000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_4000a000, status, 0)
#define DT_N_S_soc_S_rtc_4000a000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_4000a000, status, 0)
#define DT_N_S_soc_S_rtc_4000a000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_4000a000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_4000a000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_4000a000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_4000a000_P_status_LEN 1
#define DT_N_S_soc_S_rtc_4000a000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/spi@40008000
 *
 * Node identifier: DT_N_S_soc_S_spi_40008000
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_40008000_PATH "/soc/spi@40008000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_40008000_FULL_NAME "spi@40008000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_40008000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_40008000_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40008000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_40008000_ORD 21
#define DT_N_S_soc_S_spi_40008000_ORD_STR_SORTABLE 00021

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_40008000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_40008000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_40008000_EXISTS 1
#define DT_N_INST_0_ingchips_ing_spi DT_N_S_soc_S_spi_40008000
#define DT_N_NODELABEL_spi0          DT_N_S_soc_S_spi_40008000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_40008000_REG_NUM 1
#define DT_N_S_soc_S_spi_40008000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_REG_IDX_0_VAL_ADDRESS 1073774592 /* 0x40008000 */
#define DT_N_S_soc_S_spi_40008000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_40008000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_40008000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_40008000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_40008000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_IRQ_IDX_0_VAL_irq 5
#define DT_N_S_soc_S_spi_40008000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_spi_40008000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_COMPAT_MATCHES_ingchips_ing_spi 1
#define DT_N_S_soc_S_spi_40008000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_spi_40008000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_COMPAT_MODEL_IDX_0 "ing-spi"
#define DT_N_S_soc_S_spi_40008000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_40008000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_40008000_P_compatible {"ingchips,ing-spi"}
#define DT_N_S_soc_S_spi_40008000_P_compatible_IDX_0 "ingchips,ing-spi"
#define DT_N_S_soc_S_spi_40008000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-spi
#define DT_N_S_soc_S_spi_40008000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_spi
#define DT_N_S_soc_S_spi_40008000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_SPI
#define DT_N_S_soc_S_spi_40008000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40008000, compatible, 0)
#define DT_N_S_soc_S_spi_40008000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40008000, compatible, 0)
#define DT_N_S_soc_S_spi_40008000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40008000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40008000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_40008000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_reg {1073774592 /* 0x40008000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_40008000_P_reg_IDX_0 1073774592
#define DT_N_S_soc_S_spi_40008000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_40008000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_interrupts {5 /* 0x5 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_spi_40008000_P_interrupts_IDX_0 5
#define DT_N_S_soc_S_spi_40008000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_spi_40008000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_status "disabled"
#define DT_N_S_soc_S_spi_40008000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_spi_40008000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_40008000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40008000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_spi_40008000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_40008000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_spi_40008000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_40008000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40008000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40008000, status, 0)
#define DT_N_S_soc_S_spi_40008000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40008000, status, 0)
#define DT_N_S_soc_S_spi_40008000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40008000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40008000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40008000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40008000_P_status_LEN 1
#define DT_N_S_soc_S_spi_40008000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/spi@40009000
 *
 * Node identifier: DT_N_S_soc_S_spi_40009000
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_40009000_PATH "/soc/spi@40009000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_40009000_FULL_NAME "spi@40009000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_40009000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_40009000_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40009000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_40009000_ORD 22
#define DT_N_S_soc_S_spi_40009000_ORD_STR_SORTABLE 00022

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_40009000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_40009000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_40009000_EXISTS 1
#define DT_N_INST_1_ingchips_ing_spi DT_N_S_soc_S_spi_40009000
#define DT_N_NODELABEL_spi1          DT_N_S_soc_S_spi_40009000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_40009000_REG_NUM 1
#define DT_N_S_soc_S_spi_40009000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_REG_IDX_0_VAL_ADDRESS 1073778688 /* 0x40009000 */
#define DT_N_S_soc_S_spi_40009000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_40009000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_40009000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_40009000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_40009000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_IRQ_IDX_0_VAL_irq 5
#define DT_N_S_soc_S_spi_40009000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_soc_S_spi_40009000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_COMPAT_MATCHES_ingchips_ing_spi 1
#define DT_N_S_soc_S_spi_40009000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_spi_40009000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_COMPAT_MODEL_IDX_0 "ing-spi"
#define DT_N_S_soc_S_spi_40009000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_40009000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_40009000_P_compatible {"ingchips,ing-spi"}
#define DT_N_S_soc_S_spi_40009000_P_compatible_IDX_0 "ingchips,ing-spi"
#define DT_N_S_soc_S_spi_40009000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-spi
#define DT_N_S_soc_S_spi_40009000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_spi
#define DT_N_S_soc_S_spi_40009000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_SPI
#define DT_N_S_soc_S_spi_40009000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40009000, compatible, 0)
#define DT_N_S_soc_S_spi_40009000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40009000, compatible, 0)
#define DT_N_S_soc_S_spi_40009000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40009000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40009000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40009000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40009000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_40009000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_reg {1073778688 /* 0x40009000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_40009000_P_reg_IDX_0 1073778688
#define DT_N_S_soc_S_spi_40009000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_40009000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_interrupts {5 /* 0x5 */, 1 /* 0x1 */}
#define DT_N_S_soc_S_spi_40009000_P_interrupts_IDX_0 5
#define DT_N_S_soc_S_spi_40009000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_interrupts_IDX_1 1
#define DT_N_S_soc_S_spi_40009000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_status "disabled"
#define DT_N_S_soc_S_spi_40009000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_spi_40009000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_40009000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40009000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_spi_40009000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_40009000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_spi_40009000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_40009000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40009000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40009000, status, 0)
#define DT_N_S_soc_S_spi_40009000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_40009000, status, 0)
#define DT_N_S_soc_S_spi_40009000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40009000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40009000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_40009000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40009000_P_status_LEN 1
#define DT_N_S_soc_S_spi_40009000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/timer@e000e010
 *
 * Node identifier: DT_N_S_soc_S_timer_e000e010
 *
 * Binding (compatible = arm,armv7m-systick):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/timer/arm,armv7m-systick.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e000e010_PATH "/soc/timer@e000e010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e000e010_FULL_NAME "timer@e000e010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e000e010_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_timer_e000e010_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e000e010_ORD 23
#define DT_N_S_soc_S_timer_e000e010_ORD_STR_SORTABLE 00023

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e000e010_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e000e010_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e000e010_EXISTS 1
#define DT_N_INST_0_arm_armv7m_systick DT_N_S_soc_S_timer_e000e010
#define DT_N_NODELABEL_systick         DT_N_S_soc_S_timer_e000e010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e000e010_REG_NUM 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS 3758153744 /* 0xe000e010 */
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_timer_e000e010_RANGES_NUM 0
#define DT_N_S_soc_S_timer_e000e010_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_timer_e000e010_IRQ_NUM 0
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv7m_systick 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0 "armv7m-systick"
#define DT_N_S_soc_S_timer_e000e010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e000e010_P_reg {3758153744 /* 0xe000e010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0 3758153744
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1 16
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible {"arm,armv7m-systick"}
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0 "arm,armv7m-systick"
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_UNQUOTED arm,armv7m-systick
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_TOKEN arm_armv7m_systick
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_ARMV7M_SYSTICK
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source 0
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@4000c000
 *
 * Node identifier: DT_N_S_soc_S_uart_4000c000
 *
 * Binding (compatible = ingchips,ing-uart):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/serial/ingchips,ing-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_4000c000_PATH "/soc/uart@4000c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_4000c000_FULL_NAME "uart@4000c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_4000c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_4000c000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_4000c000_ORD 24
#define DT_N_S_soc_S_uart_4000c000_ORD_STR_SORTABLE 00024

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_4000c000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */ \
	17, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_4000c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_4000c000_EXISTS 1
#define DT_N_ALIAS_uart_0             DT_N_S_soc_S_uart_4000c000
#define DT_N_INST_0_ingchips_ing_uart DT_N_S_soc_S_uart_4000c000
#define DT_N_NODELABEL_uart0          DT_N_S_soc_S_uart_4000c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_4000c000_REG_NUM 1
#define DT_N_S_soc_S_uart_4000c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_REG_IDX_0_VAL_ADDRESS 1073790976 /* 0x4000c000 */
#define DT_N_S_soc_S_uart_4000c000_REG_IDX_0_VAL_SIZE 76 /* 0x4c */
#define DT_N_S_soc_S_uart_4000c000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_4000c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_4000c000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_irq 5
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_COMPAT_MATCHES_ingchips_ing_uart 1
#define DT_N_S_soc_S_uart_4000c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_uart_4000c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_COMPAT_MODEL_IDX_0 "ing-uart"
#define DT_N_S_soc_S_uart_4000c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_4000c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_4000c000_P_reg {1073790976 /* 0x4000c000 */, 76 /* 0x4c */}
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_0 1073790976
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_1 76
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_interrupts {5 /* 0x5 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_0 5
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_current_speed 115200
#define DT_N_S_soc_S_uart_4000c000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_4000c000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_status "okay"
#define DT_N_S_soc_S_uart_4000c000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_4000c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_4000c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000c000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_4000c000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_4000c000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_4000c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, status, 0)
#define DT_N_S_soc_S_uart_4000c000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_4000c000, status, 0)
#define DT_N_S_soc_S_uart_4000c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_4000c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_status_LEN 1
#define DT_N_S_soc_S_uart_4000c000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_compatible {"ingchips,ing-uart"}
#define DT_N_S_soc_S_uart_4000c000_P_compatible_IDX_0 "ingchips,ing-uart"
#define DT_N_S_soc_S_uart_4000c000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-uart
#define DT_N_S_soc_S_uart_4000c000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_uart
#define DT_N_S_soc_S_uart_4000c000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_UART
#define DT_N_S_soc_S_uart_4000c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, compatible, 0)
#define DT_N_S_soc_S_uart_4000c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_4000c000, compatible, 0)
#define DT_N_S_soc_S_uart_4000c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_4000c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_4000c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_uart_4000c000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, clocks, 0)
#define DT_N_S_soc_S_uart_4000c000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_4000c000, clocks, 0)
#define DT_N_S_soc_S_uart_4000c000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_4000c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_4000c000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_4000c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_4000c000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@4000d000
 *
 * Node identifier: DT_N_S_soc_S_uart_4000d000
 *
 * Binding (compatible = ingchips,ing-uart):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/serial/ingchips,ing-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_4000d000_PATH "/soc/uart@4000d000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_4000d000_FULL_NAME "uart@4000d000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_4000d000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_4000d000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_4000d000_ORD 25
#define DT_N_S_soc_S_uart_4000d000_ORD_STR_SORTABLE 00025

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_4000d000_REQUIRES_ORDS \
	9, /* /soc */ \
	10, /* /soc/interrupt-controller@e000e100 */ \
	17, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_4000d000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_4000d000_EXISTS 1
#define DT_N_ALIAS_uart_1             DT_N_S_soc_S_uart_4000d000
#define DT_N_INST_1_ingchips_ing_uart DT_N_S_soc_S_uart_4000d000
#define DT_N_NODELABEL_uart1          DT_N_S_soc_S_uart_4000d000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_4000d000_REG_NUM 1
#define DT_N_S_soc_S_uart_4000d000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_REG_IDX_0_VAL_ADDRESS 1073795072 /* 0x4000d000 */
#define DT_N_S_soc_S_uart_4000d000_REG_IDX_0_VAL_SIZE 76 /* 0x4c */
#define DT_N_S_soc_S_uart_4000d000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_4000d000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_4000d000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_irq 6
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_COMPAT_MATCHES_ingchips_ing_uart 1
#define DT_N_S_soc_S_uart_4000d000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_uart_4000d000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_COMPAT_MODEL_IDX_0 "ing-uart"
#define DT_N_S_soc_S_uart_4000d000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_4000d000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_4000d000_P_reg {1073795072 /* 0x4000d000 */, 76 /* 0x4c */}
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_0 1073795072
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_1 76
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_interrupts {6 /* 0x6 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_0 6
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_current_speed 115200
#define DT_N_S_soc_S_uart_4000d000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_4000d000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_status "okay"
#define DT_N_S_soc_S_uart_4000d000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_4000d000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_4000d000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000d000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_4000d000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_4000d000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_4000d000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000d000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, status, 0)
#define DT_N_S_soc_S_uart_4000d000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_4000d000, status, 0)
#define DT_N_S_soc_S_uart_4000d000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_4000d000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_status_LEN 1
#define DT_N_S_soc_S_uart_4000d000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_compatible {"ingchips,ing-uart"}
#define DT_N_S_soc_S_uart_4000d000_P_compatible_IDX_0 "ingchips,ing-uart"
#define DT_N_S_soc_S_uart_4000d000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-uart
#define DT_N_S_soc_S_uart_4000d000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_uart
#define DT_N_S_soc_S_uart_4000d000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_UART
#define DT_N_S_soc_S_uart_4000d000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, compatible, 0)
#define DT_N_S_soc_S_uart_4000d000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_4000d000, compatible, 0)
#define DT_N_S_soc_S_uart_4000d000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_4000d000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_4000d000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_uart_4000d000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, clocks, 0)
#define DT_N_S_soc_S_uart_4000d000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_4000d000, clocks, 0)
#define DT_N_S_soc_S_uart_4000d000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_4000d000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_4000d000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_4000d000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_4000d000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@02027000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_02027000
 *
 * Binding (compatible = ingchips,ing-flash-controller):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/flash_controller/ingchips,ing-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_02027000_PATH "/soc/flash-controller@02027000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_02027000_FULL_NAME "flash-controller@02027000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_02027000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_02027000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_02027000_ORD 26
#define DT_N_S_soc_S_flash_controller_02027000_ORD_STR_SORTABLE 00026

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_02027000_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_02027000_SUPPORTS_ORDS \
	27, /* /soc/flash-controller@02027000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_02027000_EXISTS 1
#define DT_N_INST_0_ingchips_ing_flash_controller DT_N_S_soc_S_flash_controller_02027000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_02027000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_02027000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_REG_IDX_0_VAL_ADDRESS 33714176 /* 0x2027000 */
#define DT_N_S_soc_S_flash_controller_02027000_REG_IDX_0_VAL_SIZE 364544 /* 0x59000 */
#define DT_N_S_soc_S_flash_controller_02027000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_02027000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_02027000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_02027000_COMPAT_MATCHES_ingchips_ing_flash_controller 1
#define DT_N_S_soc_S_flash_controller_02027000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_COMPAT_VENDOR_IDX_0 "Ingchips Technology Co., Ltd."
#define DT_N_S_soc_S_flash_controller_02027000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_COMPAT_MODEL_IDX_0 "ing-flash-controller"
#define DT_N_S_soc_S_flash_controller_02027000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_02027000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_02027000_P_reg {33714176 /* 0x2027000 */, 364544 /* 0x59000 */}
#define DT_N_S_soc_S_flash_controller_02027000_P_reg_IDX_0 33714176
#define DT_N_S_soc_S_flash_controller_02027000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_P_reg_IDX_1 364544
#define DT_N_S_soc_S_flash_controller_02027000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible {"ingchips,ing-flash-controller"}
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_IDX_0 "ingchips,ing-flash-controller"
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_IDX_0_STRING_UNQUOTED ingchips,ing-flash-controller
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_IDX_0_STRING_TOKEN ingchips_ing_flash_controller
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_IDX_0_STRING_UPPER_TOKEN INGCHIPS_ING_FLASH_CONTROLLER
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_02027000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_02027000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_02027000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_02027000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_02027000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_02027000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_02027000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@02027000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_02027000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   /home/ming/zephyrproject/zephyr/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_PATH "/soc/flash-controller@02027000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@02027000) identifier: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_02027000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_ORD 27
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_ORD_STR_SORTABLE 00027

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_REQUIRES_ORDS \
	26, /* /soc/flash-controller@02027000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_02027000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_02027000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_REG_IDX_0_VAL_ADDRESS 33714176 /* 0x2027000 */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_REG_IDX_0_VAL_SIZE 364544 /* 0x59000 */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_reg {33714176 /* 0x2027000 */, 364544 /* 0x59000 */}
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_reg_IDX_0 33714176
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_reg_IDX_1 364544
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_02027000_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_20004358
#define DT_CHOSEN_zephyr_sram_EXISTS       1
#define DT_CHOSEN_zephyr_flash             DT_N_S_soc_S_flash_controller_02027000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS      1
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_uart_4000c000
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_uart_4000c000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_uart_pipe         DT_N_S_soc_S_uart_4000d000
#define DT_CHOSEN_zephyr_uart_pipe_EXISTS  1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_02027000) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000) fn(DT_N_S_soc_S_gpio_40011000) fn(DT_N_S_soc_S_i2c_40013000) fn(DT_N_S_soc_S_i2c_40014000) fn(DT_N_S_soc_S_spi_40008000) fn(DT_N_S_soc_S_spi_40009000) fn(DT_N_S_soc_S_rtc_4000a000) fn(DT_N_S_soc_S_gpio_40012000) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_idle) fn(DT_N_S_cpus_S_power_states_S_suspend) fn(DT_N_S_memory_20004358) fn(DT_N_S_system_clock) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_2) fn(DT_N_S_gpio_keys) fn(DT_N_S_gpio_keys_S_button)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_02027000) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000) fn(DT_N_S_soc_S_gpio_40011000) fn(DT_N_S_soc_S_gpio_40012000) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_idle) fn(DT_N_S_cpus_S_power_states_S_suspend) fn(DT_N_S_memory_20004358) fn(DT_N_S_system_clock) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_2) fn(DT_N_S_gpio_keys) fn(DT_N_S_gpio_keys_S_button)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_02027000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40011000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40013000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_40014000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_40008000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_40009000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_4000a000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40012000, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_idle, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_suspend, __VA_ARGS__) fn(DT_N_S_memory_20004358, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_2, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__) fn(DT_N_S_gpio_keys_S_button, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_02027000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40011000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40012000, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_idle, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_suspend, __VA_ARGS__) fn(DT_N_S_memory_20004358, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_leds_S_led_2, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__) fn(DT_N_S_gpio_keys_S_button, __VA_ARGS__)

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_ingchips_ing9168mini 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_v7m_nvic 1
#define DT_COMPAT_HAS_OKAY_arm_armv7m_systick 1
#define DT_COMPAT_HAS_OKAY_ingchips_ing_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_ingchips_ing_uart 1
#define DT_COMPAT_HAS_OKAY_ingchips_ing_gpio 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_m4 1
#define DT_COMPAT_HAS_OKAY_zephyr_power_state 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_fixed_clock 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1
#define DT_COMPAT_HAS_OKAY_gpio_keys 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_ingchips_ing9168mini_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_v7m_nvic_NUM_OKAY 1
#define DT_N_INST_arm_armv7m_systick_NUM_OKAY 1
#define DT_N_INST_ingchips_ing_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_ingchips_ing_uart_NUM_OKAY 2
#define DT_N_INST_ingchips_ing_gpio_NUM_OKAY 2
#define DT_N_INST_arm_cortex_m4_NUM_OKAY 1
#define DT_N_INST_zephyr_power_state_NUM_OKAY 2
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_fixed_clock_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_N_INST_gpio_keys_NUM_OKAY 1
#define DT_FOREACH_OKAY_ingchips_ing9168mini(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_ingchips_ing9168mini(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ingchips_ing9168mini(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ingchips_ing9168mini(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_v7m_nvic(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100)
#define DT_FOREACH_OKAY_VARGS_arm_v7m_nvic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_v7m_nvic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_v7m_nvic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv7m_systick(fn) fn(DT_N_S_soc_S_timer_e000e010)
#define DT_FOREACH_OKAY_VARGS_arm_armv7m_systick(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv7m_systick(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv7m_systick(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ingchips_ing_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_02027000)
#define DT_FOREACH_OKAY_VARGS_ingchips_ing_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_02027000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ingchips_ing_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ingchips_ing_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_02027000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ingchips_ing_uart(fn) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000)
#define DT_FOREACH_OKAY_VARGS_ingchips_ing_uart(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ingchips_ing_uart(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_ingchips_ing_uart(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_ingchips_ing_gpio(fn) fn(DT_N_S_soc_S_gpio_40011000) fn(DT_N_S_soc_S_gpio_40012000)
#define DT_FOREACH_OKAY_VARGS_ingchips_ing_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_40011000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40012000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ingchips_ing_gpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_ingchips_ing_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_m4(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_m4(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_m4(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_m4(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_power_state(fn) fn(DT_N_S_cpus_S_power_states_S_idle) fn(DT_N_S_cpus_S_power_states_S_suspend)
#define DT_FOREACH_OKAY_VARGS_zephyr_power_state(fn, ...) fn(DT_N_S_cpus_S_power_states_S_idle, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_suspend, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_power_state(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_power_state(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_memory_20004358)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_memory_20004358, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_clock(fn) fn(DT_N_S_system_clock)
#define DT_FOREACH_OKAY_VARGS_fixed_clock(fn, ...) fn(DT_N_S_system_clock, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_clock(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_keys(fn) fn(DT_N_S_gpio_keys)
#define DT_FOREACH_OKAY_VARGS_gpio_keys(fn, ...) fn(DT_N_S_gpio_keys, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_keys(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_keys(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
